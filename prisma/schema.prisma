generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        Role         @default(USER)
  phone       String?      @unique
  orders      Orders[]
  vendor      Vendor?
  deliveryMan DeliveryMan?
  createdAt   DateTime     @default(now())
  cartItems   CartItem[]
  addresses   Address[]
}

enum Role {
  USER
  ADMIN
  DELIVERY
  VENDOR
}

model Vendor {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id])
  userId         Int        @unique
  restaurantName String
  restaurantId   String     @unique
  menuItems      menuItem[]
  orders         Orders[]
  rating         Float      @default(0)
  priceRange     Float?
  imageUrl       String?
  addressId      Int        @unique // Foreign key to the Address table
  address        Address    @relation(fields: [addressId], references: [id])
}

model Address {
  id        Int    @id @default(autoincrement())
  street    String
  city      String
  state     String
  zipCode   String
  phone     String
  latitude  Float?
  longitude Float?
  userId    Int
  user      User   @relation(fields: [userId], references: [id])

  vendor Vendor?

  orders Orders[]

  @@map("addresses")
}

model Orders {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  vendor        Vendor       @relation(fields: [vendorId], references: [id])
  vendorId      Int
  deliveryMan   DeliveryMan? @relation(fields: [deliveryManId], references: [id])
  deliveryManId Int?
  status        OrderStatus  @default(PENDING)
  amount        Float
  payment       Payment?
  createdAt     DateTime     @default(now())
  items         OrderItem[]
  addressId     Int
  address       Address      @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Float // Price at the time of order
  orderId    Int
  order      Orders   @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem   menuItem @relation(fields: [menuItemId], references: [id])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
  OUT_FOR_DELIVERY
}

model DeliveryMan {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  orders        Orders[]
  isAvailable   Boolean  @default(true)
  vehicleType   String?
  vehicleNumber String?
  latitude      Float?
  longitude     Float?
}

model menuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  vendorId    Int
  imageUrl    String?
  category    String?
  isAvailable Boolean     @default(true)
  reviews     Float?      @default(0)
  cartItem    CartItem[]
  ordersItems OrderItem[]
}

model Payment {
  id        Int           @id @default(autoincrement())
  order     Orders        @relation(fields: [orderId], references: [id])
  orderId   Int           @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model CartItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  userId     Int
  menuItemId Int
  user       User     @relation(fields: [userId], references: [id])
  menuItem   menuItem @relation(fields: [menuItemId], references: [id])

  @@unique([userId, menuItemId]) // Ensures a user can't have duplicate menu items
}
